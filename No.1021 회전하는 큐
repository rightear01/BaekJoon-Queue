#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
/*
접근법
데크의 구조는 보통 이중연결리스트로 구현한다.
문제는 팝 하는 경우에는 연산으로 특정짓지 않으며,
왼쪽 또는 오른쪽으로 데크를 회전시키는 경우에만 연산의 횟수를 카운팅한다.
이진 탐색을 사용하고 싶지만, 데크에서는 인덱스가 있지 않고, 혹여 인덱스를 노드에게
부여 하더라도 노드들의 위치가 계속 바뀌어 의미가 없다.
연결리스트에서 이진탐색은 어떻게 구현해야 할까?
중간을 찾는데에 초점을 두었다.
먼저 해당하는 값을 찾고 해당 노드가 전체 사이즈에서 몇번째에 위치하는지를 계산하고
노드 총갯수의 중간보다 우측에 있는지 아니면 좌측에 있는지를 계산한다면, 최적의 연산 횟수를 구할 수 있다.
*/
int DQsize = 0; // 연산의 진행에 따라서 노드의 갯수가 바뀌기 때문에 카운트한다.
typedef struct DequeNode {
	int data;
	struct DequeNode* Llink, * Rlink;
}DequeNode;

typedef struct {
	DequeNode* front, * rear;
}Deque;

Deque* createDeque() {
	Deque* DQ = (Deque*)malloc(sizeof(Deque));
	DQ->front = DQ->rear = NULL;
	return DQ;
}

int isEmpty(Deque* DQ) {
	if (DQ->front == NULL) return 1;
	else return 0;
}

void insertBack(Deque* DQ, int item) {
	DequeNode* newNode = (DequeNode*)malloc(sizeof(DequeNode));
	newNode->data = item;
	if (isEmpty(DQ)) {
		DQ->front = DQ->rear = newNode;
		newNode->Llink = newNode->Rlink = NULL;
		++DQsize;
	}
	else {
		newNode->Llink = DQ->rear;
		newNode->Rlink = NULL;
		DQ->rear->Rlink = newNode;
		DQ->rear = newNode;
		++DQsize;
	}
}

void insertFront(Deque* DQ, int item) {
	DequeNode* newNode = (DequeNode*)malloc(sizeof(DequeNode));
	newNode->data = item;
	if (isEmpty(DQ)) {
		DQ->front = DQ->rear = newNode;
		newNode->Llink = newNode->Rlink = NULL;
		++DQsize;
	}
	else {
		newNode->Rlink = DQ->front;
		newNode->Llink = NULL;
		DQ->front->Llink = newNode;
		DQ->front = newNode;
		++DQsize;
	}
}

int popFront(Deque* DQ) {
	if (isEmpty(DQ)) return;
	else {
		DequeNode* old = DQ->front;
		int item = old->data;
		if (DQ->front->Rlink == NULL) { DQ->front = DQ->rear = NULL; } // 데큐에 원소가 하나 밖에 없는 경우
		else {
			DQ->front = DQ->front->Rlink;
			DQ->front->Llink = NULL;
		}
		free(old); --DQsize;  return item;
	}
}

int popBack(Deque* DQ) {
	if (isEmpty(DQ)) return;
	else {
		DequeNode* old = DQ->rear;
		int item = old->data;
		if (DQ->rear->Llink == NULL) { DQ->front = DQ->rear = NULL; } // 데큐에 원소가 하나인 경우
		else {
			DQ->rear = DQ->rear->Llink;
			DQ->rear->Rlink = NULL;
		}
		free(old); --DQsize; return item;
	}
}

int comToMid(Deque* DQ, int num) {
	DequeNode* com = DQ->front;
	int ctr = 0;														// 원하는 값이 연결리스트의 몇번째 노드인지 체크
	while (com->data != num) { ++ctr; com = com->Rlink; }
	if (ctr > (DQsize / 2)) return 1;									// 중간보다 우측
	else return 0;														// 중간보다 좌측
}

int main() {
	Deque* DQ = createDeque();
	int size, wannaCnt, num, commandCtr = 0;
	scanf("%d %d", &size, &wannaCnt);
	for (int i = 1; i <= size; i++) insertBack(DQ, i);
	for (int i = 0; i < wannaCnt; i++) {
		scanf("%d", &num);
		if (comToMid(DQ, num)) { // R에 있다면
			while (DQ->rear->data != num) {
				insertFront(DQ, popBack(DQ)); // 우 -> 좌로 회전
				++commandCtr;
			}
			popBack(DQ);
			++commandCtr; // 앞으로 보내고 빼야하기 때문에 하나 더 카운트
		}
		else { // L에 있다면
			while (DQ->front->data != num) {
				insertBack(DQ, popFront(DQ)); // 좌 -> 우로 회전
				++commandCtr;
			}
			popFront(DQ);
		}
	}
	printf("%d", commandCtr);
	return 0;
}
